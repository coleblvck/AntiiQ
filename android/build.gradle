allprojects {
    repositories {
        google()
        mavenCentral()
    }
subprojects {
    afterEvaluate { project ->
        // Define the list of plugin names you want to target
        def targetedPlugins = ['access_wallpaper', 'on_audio_query_android', 'uri_to_file', 'receive_intent'] // Add other plugin names here

        // Check if the current project is in the targeted list
        if (targetedPlugins.contains(project.name)) {
            if (project.hasProperty('android')) {
                project.android {
                    if (namespace == null) {
                        namespace project.group
                    }
                }
                def javaVersion = JavaVersion.VERSION_17
                android {
                    def minimumApiVersion = 21
                    def androidApiVersion = 34
                    compileSdkVersion androidApiVersion
                    defaultConfig {
                        minSdkVersion minimumApiVersion
                        targetSdkVersion androidApiVersion
                    }
                    compileOptions {
                        sourceCompatibility javaVersion
                        targetCompatibility javaVersion
                    }
                    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                        kotlinOptions {
                            jvmTarget = javaVersion.toString()
                        }
                    }
                    println("Setting java version to ${javaVersion.toString()} which is $javaVersion for project ${project.name}")
                    println("Setting minSdkVersion to $minimumApiVersion for project ${project.name}")
                    println("Setting compileSdkVersion and targetSdkVersion to $androidApiVersion for project ${project.name}")
                }
            }
        } else {
             // Optional: Add a message for projects that are skipped
             // println("Skipping Java version configuration for project ${project.name}")
        }
    }
}
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
